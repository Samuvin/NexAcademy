generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  /// @enum {STUDENT|MANAGER|ADMIN|INSTRUCTOR|NON_EDITING_INSTRUCTOR}
  /// - STUDENT: Default role for new users
  /// - MANAGER: Can manage courses and users
  /// - ADMIN: Full system access
  /// - INSTRUCTOR: Can create and edit courses
  /// - NON_EDITING_INSTRUCTOR: Can view courses but not edit them
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  resetToken    String?   @unique
  resetTokenExp DateTime?

  @@index([role])
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?    @default("")
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  visibility  Visibility @default(SHOW)
  courses     Course[]
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subtitle    String
  endDate     DateTime
  startDate   DateTime
  visibility  String   @default("SHOW")
  category    Category @relation(fields: [categoryId], references: [id])
  modules     Module[]

  @@index([categoryId])
}

model Module {
  id         String      @id @default(cuid())
  title      String
  courseId   String
  order      Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  course     Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submodules Submodule[]

  @@index([courseId])
}

model Submodule {
  id        String   @id @default(cuid())
  title     String
  moduleId  String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
}

model Folder {
  id          String    @id @default(cuid())
  name        String
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Self-referencing relationship for nested folders
  parent      Folder?   @relation("FolderHierarchy", fields: [parentId], references: [id])
  subfolders  Folder[]  @relation("FolderHierarchy")
  
  // Questions in this folder
  questions   Question[]
  
  @@index([parentId])
}

/// Valid roles for users:
/// - STUDENT: Default role for new users
/// - MANAGER: Can manage courses and users
/// - ADMIN: Full system access
/// - INSTRUCTOR: Can create and edit courses
/// - NON_EDITING_INSTRUCTOR: Can view courses but not edit them
enum Role {
  STUDENT
  MANAGER
  ADMIN
  INSTRUCTOR
  NON_EDITING_INSTRUCTOR
}

enum Visibility {
  SHOW
  HIDE
}

enum QuestionType {
  MCQ
  CODING
}

enum QuestionStatus {
  DRAFT
  READY
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgrammingLanguage {
  C
  CPP
  JAVA
  PYTHON2
  PYTHON3
  GO
  JAVASCRIPT
  RUBY
}

model Question {
  id          String          @id @default(cuid())
  name        String
  type        QuestionType
  status      QuestionStatus  @default(DRAFT)
  version     Int            @default(1)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  // Folder relationship
  folderId    String
  folder      Folder          @relation(fields: [folderId], references: [id])
  
  // Type-specific relationships
  mCQQuestion MCQQuestion?
  codingQuestion CodingQuestion?
  
  // Version history
  versions    QuestionVersion[]
  
  @@index([folderId])
}

model QuestionVersion {
  id          String          @id @default(cuid())
  questionId  String
  question    Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  version     Int
  name        String
  type        QuestionType
  status      QuestionStatus
  content     Json           // Stores the full question data at this version
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@unique([questionId, version])
  @@index([questionId])
}

model MCQQuestion {
  id              String          @id @default(cuid())
  questionText    String
  defaultMark     Float           @default(1)
  shuffleChoice   Boolean         @default(false)
  isMultiple      Boolean         @default(false)
  difficulty      QuestionDifficulty
  tags            String[]        @default([])
  generalFeedback String?
  options         MCQOption[]
  question        Question        @relation(fields: [questionId], references: [id])
  questionId      String          @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model MCQOption {
  id          String    @id @default(cuid())
  text        String
  grade       Float     @default(0.0)
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // MCQQuestion relationship
  mcqQuestionId String
  mcqQuestion   MCQQuestion @relation(fields: [mcqQuestionId], references: [id], onDelete: Cascade)
  
  @@index([mcqQuestionId])
}

model CodingQuestion {
  id              String            @id @default(cuid())
  questionId      String            @unique
  questionText    String
  defaultMark     Float             @default(1.0)
  languageOptions LanguageOption[]
  testCases       TestCase[]
  question        Question          @relation(fields: [questionId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model LanguageOption {
  id              String          @id @default(cuid())
  language        ProgrammingLanguage
  preloadCode     String?
  solution        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // CodingQuestion relationship
  codingQuestionId String
  codingQuestion   CodingQuestion @relation(fields: [codingQuestionId], references: [id], onDelete: Cascade)
  
  @@index([codingQuestionId])
}

model TestCase {
  id              String          @id @default(cuid())
  input           String
  output          String
  isSample        Boolean         @default(false)
  isHidden        Boolean         @default(false)
  showOnFailure   Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // CodingQuestion relationship
  codingQuestionId String
  codingQuestion   CodingQuestion @relation(fields: [codingQuestionId], references: [id], onDelete: Cascade)
  
  @@index([codingQuestionId])
}
