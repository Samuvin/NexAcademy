generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  /// @enum {STUDENT|MANAGER|ADMIN|INSTRUCTOR|NON_EDITING_INSTRUCTOR}
  /// - STUDENT: Default role for new users
  /// - MANAGER: Can manage courses and users
  /// - ADMIN: Full system access
  /// - INSTRUCTOR: Can create and edit courses
  /// - NON_EDITING_INSTRUCTOR: Can view courses but not edit them
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  resetToken    String?   @unique
  resetTokenExp DateTime?
  assessments   Assessment[]

  @@index([role])
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?    @default("")
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  visibility  Visibility @default(SHOW)
  courses     Course[]
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subtitle    String
  endDate     DateTime
  startDate   DateTime
  visibility  String   @default("SHOW")
  category    Category @relation(fields: [categoryId], references: [id])
  modules     Module[]

  @@index([categoryId])
}

model Module {
  id         String      @id @default(cuid())
  title      String
  courseId   String
  order      Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  course     Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submodules Submodule[]

  @@index([courseId])
}

model Submodule {
  id        String   @id @default(cuid())
  title     String
  moduleId  String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
}

model Folder {
  id          String       @id @default(cuid())
  name        String
  parentId    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  parent      Folder?      @relation("FolderHierarchy", fields: [parentId], references: [id])
  subfolders  Folder[]     @relation("FolderHierarchy")
  questions   Question[]
  assessments Assessment[]

  @@index([parentId])
}

model Question {
  id                String            @id @default(cuid())
  name              String
  type              QuestionType
  status            QuestionStatus    @default(DRAFT)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  folderId          String
  version           Int               @default(1)
  creatorId         String            @default("system")
  creatorName       String            @default("System")
  lastModifiedBy    String            @default("system")
  lastModifiedByName String           @default("System")
  codingQuestion    CodingQuestion?
  mCQQuestion       MCQQuestion?
  folder            Folder            @relation(fields: [folderId], references: [id])
  versions          QuestionVersion[]
  sections          Section[]

  @@index([folderId])
  @@index([creatorId])
}

model QuestionVersion {
  id         String         @id @default(cuid())
  questionId String
  version    Int
  name       String
  type       QuestionType
  status     QuestionStatus
  content    Json
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  question   Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, version])
  @@index([questionId])
}

model MCQQuestion {
  id              String             @id @default(cuid())
  questionId      String             @unique
  questionText    String
  defaultMark     Float              @default(1.0)
  shuffleChoice   Boolean            @default(false)
  isMultiple      Boolean            @default(false)
  tags            String[]           @default([])
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  generalFeedback String?
  difficulty      QuestionDifficulty @default(MEDIUM)
  options         MCQOption[]
  question        Question           @relation(fields: [questionId], references: [id])
}

model MCQOption {
  id            String      @id @default(cuid())
  text          String
  grade         Float       @default(0.0)
  feedback      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  mcqQuestionId String
  mcqQuestion   MCQQuestion @relation(fields: [mcqQuestionId], references: [id], onDelete: Cascade)

  @@index([mcqQuestionId])
}

model CodingQuestion {
  id              String           @id @default(cuid())
  questionId      String           @unique
  questionText    String
  defaultMark     Float            @default(1.0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  question        Question         @relation(fields: [questionId], references: [id])
  languageOptions LanguageOption[]
  testCases       TestCase[]
}

model LanguageOption {
  id               String              @id @default(cuid())
  language         ProgrammingLanguage
  preloadCode      String?
  solution         String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  codingQuestionId String
  codingQuestion   CodingQuestion      @relation(fields: [codingQuestionId], references: [id], onDelete: Cascade)

  @@index([codingQuestionId])
}

model TestCase {
  id               String         @id @default(cuid())
  input            String
  output           String
  isSample         Boolean        @default(false)
  isHidden         Boolean        @default(false)
  showOnFailure    Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  codingQuestionId String
  codingQuestion   CodingQuestion @relation(fields: [codingQuestionId], references: [id], onDelete: Cascade)

  @@index([codingQuestionId])
}

/// Valid roles for users:
/// - STUDENT: Default role for new users
/// - MANAGER: Can manage courses and users
/// - ADMIN: Full system access
/// - INSTRUCTOR: Can create and edit courses
/// - NON_EDITING_INSTRUCTOR: Can view courses but not edit them
enum Role {
  STUDENT
  MANAGER
  ADMIN
  INSTRUCTOR
  NON_EDITING_INSTRUCTOR
}

enum Visibility {
  SHOW
  HIDE
}

enum QuestionType {
  MCQ
  CODING
}

enum QuestionStatus {
  DRAFT
  READY
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgrammingLanguage {
  C
  CPP
  JAVA
  PYTHON2
  PYTHON3
  GO
  JAVASCRIPT
  RUBY
}

enum AssessmentStatus {
  DRAFT
  READY
  PUBLISHED
  ARCHIVED
}

model Assessment {
  id            String         @id @default(cuid())
  name          String
  description   String?
  status        AssessmentStatus @default(DRAFT)
  
  // Timing settings
  startDate     DateTime?
  endDate       DateTime?
  duration      Int?           // in minutes
  timeBoundEnabled Boolean   @default(false)
  timeLimitEnabled Boolean   @default(false)
  
  // Grade settings
  totalMarks    Int            @default(100)
  passingMarks  Int
  gradeToPass Float?
  attemptsAllowed Int?
  unlimitedAttempts Boolean    @default(false)
  
  // Display settings
  displayDescription Boolean  @default(false)
  navigationMethod String     @default("free")
  shuffleWithinQuestions Boolean @default(false)
  questionBehaviourMode String @default("deferredfeedback")
  
  // Review options
  reviewDuringAttempt Boolean @default(false)
  reviewImmediatelyAfterAttempt Boolean @default(false)
  reviewLaterWhileOpen Boolean @default(false)
  reviewAfterClose Boolean @default(false)
  
  // Security settings
  proctoring String @default("not_proctoring")
  disableRightClick Boolean @default(false)
  disableCopyPaste Boolean @default(false)
  
  // Timestamps and relations
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdById   String
  createdBy     User          @relation(fields: [createdById], references: [id])
  folderId      String
  folder        Folder        @relation(fields: [folderId], references: [id])
  tags          AssessmentTag[]
  sections      Section[]

  @@index([createdById])
  @@index([folderId])
}

model Section {
  id            String       @id @default(cuid())
  name          String
  description   String?
  order         Int          @default(0)
  assessmentId  String
  assessment    Assessment   @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  questions     Question[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([assessmentId])
}

model Tag {
  id            String         @id @default(cuid())
  name          String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  assessments   AssessmentTag[]
}

model AssessmentTag {
  assessmentId  String
  tagId         String
  assessment    Assessment     @relation(fields: [assessmentId], references: [id])
  tag           Tag           @relation(fields: [tagId], references: [id])
  createdAt     DateTime      @default(now())

  @@id([assessmentId, tagId])
}
