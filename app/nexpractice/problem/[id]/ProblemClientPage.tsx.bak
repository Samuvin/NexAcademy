"use client"

import React, { Fragment, useState, useRef, useEffect, useCallback, useMemo } from "react"
import {
  ChevronLeft,
  ChevronRight,
  Star,
  Play,
  Send,
  Bell,
  FileText,
  Settings,
  List,
  BarChart2,
  MessageSquare,
  Clock,
  Check,
  Eye,
  Grip,
  Terminal,
  Menu,
  X,
  Home,
  MoreVertical,
  Code,
  Zap,
  BrainCircuit,
  RotateCw,
  BookOpenCheck,
  Sparkles,
  Crown,
  Users,
  Maximize2,
  Minimize2,
  ChevronDown,
  Search,
  User,
  LogOut,
  AlertTriangle,
  XCircle,
  Info,
  Cpu,
  Loader2,
  Percent,
  Lock,
  CheckCircle,
  AlignLeft,
  ZoomIn,
  ZoomOut,
  Maximize,
  Minimize,
  Copy,
  ClipboardCopy,
  Sparkle,
  ArrowLeft,
  Filter,
  RefreshCw,
  Database,
  AlertCircle,
  HelpCircle,
  Calendar,
  Hash,
  Code2,
  Server,
  FileCode,
  MonitorSmartphone,
  Moon,
  Sun,
  Type,
  Indent
} from "lucide-react"
import { Avatar } from "@/components/ui/avatar"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card"
import { NexEditor as CodeEditor } from "@/components/NexEditor"
import { useMobile as useIsMobile } from "@/hooks/use-mobile"
import { useTheme } from "next-themes"
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover"
import { CodingQuestionsSidebar } from "@/components/CodingQuestionsSidebar"
import { Input } from "@/components/ui/input"
import type { editor } from "monaco-editor"
import type { Monaco } from "@monaco-editor/react"
import { useSession } from "next-auth/react"
import { useProfilePic } from "@/components/ProfilePicContext"
import { useMutation, useQuery } from '@apollo/client';
import { RUN_CODE, SUBMIT_CODE } from './graphql/codeExecution';
import { getLanguageId } from './utils/getLanguageId';
import { Skeleton } from "@/components/ui/skeleton";
import { toast } from "sonner"
import confetti from 'canvas-confetti'
import { HiddenTestcasesTab } from "./components/HiddenTestcasesTab";
import ProblemHeader from "./components/ProblemHeader"
import { useToast } from "@/components/ui/use-toast"
import { useRouter } from "next/navigation"
import { usePathname } from "next/navigation"
import { useSearchParams } from "next/navigation"
import { submissionService } from '@/lib/services/submissionService';
import JSConfetti from 'js-confetti'
import { Editor } from "@monaco-editor/react"
import { ModeToggle } from "@/components/nexpractice/mode-toggle";
import DOMPurify from 'isomorphic-dompurify';
import { useSmartCodeSync } from './hooks/useSmartCodeSync';
import { useCodeSync } from './hooks/useCodeSync';

// Judge0 API language mapping
const JUDGE0_LANGUAGES = {
  "45": "Assembly (NASM 2.14.02)",
  "46": "Bash (5.0.0)",
  "47": "Basic (FBC 1.07.1)",
  "75": "C (Clang 7.0.1)",
  "76": "C++ (Clang 7.0.1)",
  "48": "C (GCC 7.4.0)",
  "52": "C++ (GCC 7.4.0)",
  "49": "C (GCC 8.3.0)",
  "53": "C++ (GCC 8.3.0)",
  "50": "C (GCC 9.2.0)",
  "54": "C++ (GCC 9.2.0)",
  "86": "Clojure (1.10.1)",
  "51": "C# (Mono 6.6.0.161)",
  "77": "COBOL (GnuCOBOL 2.2)",
  "55": "Common Lisp (SBCL 2.0.0)",
  "56": "D (DMD 2.089.1)",
  "57": "Elixir (1.9.4)",
  "58": "Erlang (OTP 22.2)",
  "44": "Executable",
  "87": "F# (.NET Core SDK 3.1.202)",
  "59": "Fortran (GFortran 9.2.0)",
  "60": "Go (1.13.5)",
  "88": "Groovy (3.0.3)",
  "61": "Haskell (GHC 8.8.1)",
  "62": "Java (OpenJDK 13.0.1)",
  "63": "JavaScript (Node.js 12.14.0)",
  "78": "Kotlin (1.3.70)",
  "64": "Lua (5.3.5)",
  "89": "Multi-file program",
  "79": "Objective-C (Clang 7.0.1)",
  "65": "OCaml (4.09.0)",
  "66": "Octave (5.1.0)",
  "67": "Pascal (FPC 3.0.4)",
  "85": "Perl (5.28.1)",
  "68": "PHP (7.4.1)",
  "43": "Plain Text",
  "69": "Prolog (GNU Prolog 1.4.5)",
  "70": "Python (2.7.17)",
  "71": "Python (3.8.1)",
  "80": "R (4.0.0)",
  "72": "Ruby (2.7.0)",
  "73": "Rust (1.40.0)",
  "81": "Scala (2.13.2)",
  "82": "SQL (SQLite 3.27.2)",
  "83": "Swift (5.2.3)",
  "74": "TypeScript (3.7.4)",
  "84": "Visual Basic.Net (vbnc 0.0.0.5943)"
}

interface ProblemClientPageProps {
  codingQuestion: any // Use 'any' for now, or import the correct type and extend it to include .question
  defaultLanguage: string
  preloadCode: any // Updated to support object or string
}

// Helper function to format test case content
const formatTestCase = (content: string): React.ReactNode => {
  if (!content) return null;
  
  // Try to parse the content as JSON to see if it's structured data
  try {
    const parsedData = JSON.parse(content);
    if (typeof parsedData === 'object') {
      return (
        <div className="syntax-highlighted">
          {renderJsonValue(parsedData, 0)}
        </div>
      );
    }
  } catch (e) {
    // Not valid JSON, continue with other formatting
  }
  
  // Handle arrays represented as strings like "[1,2,3]"
  if (content.trim().startsWith('[') && content.trim().endsWith(']')) {
    try {
      const arrayData = JSON.parse(content);
      if (Array.isArray(arrayData)) {
        return (
          <div className="syntax-highlighted">
            {renderArray(arrayData)}
          </div>
        );
      }
    } catch (e) {
      // Not a valid array, continue
    }
  }
  
  // Handle common variable assignment patterns like "nums = [2,7,11,15], target = 9"
  if (content.includes('=')) {
    return (
      <div className="space-y-1">
        {content.split(',').map((part, idx) => {
          const parts = part.split('=').map(s => s.trim());
          if (parts.length < 2) return <div key={idx}>{part}</div>;
          
          const [variable, value] = parts;
          
          return (
            <div key={idx} className="flex flex-wrap items-center">
              <span className="text-purple-600 dark:text-purple-400 mr-1">{variable}</span>
              <span className="text-slate-600 dark:text-slate-400 mr-1">=</span>
              <span>
                {renderFormattedValue(value)}
              </span>
            </div>
          );
        })}
      </div>
    );
  }
  
  // If content has multiple lines, preserve them
  if (content.includes('\n')) {
    return (
      <pre className="whitespace-pre-wrap">{content}</pre>
    );
  }
  
  // Default: return as-is with basic formatting
  return (
    <div className="whitespace-pre-wrap">{renderFormattedValue(content)}</div>
  );
};

// Helper function to render formatted value
const renderFormattedValue = (value: string): React.ReactNode => {
  // Check if value is a number
  if (/^-?\d+(\.\d+)?$/.test(value)) {
    return <span className="text-amber-600 dark:text-amber-400">{value}</span>;
  }
  
  // Check if value is a boolean
  if (value === 'true' || value === 'false') {
    return <span className="text-green-600 dark:text-green-400">{value}</span>;
  }
  
  // Check if value is null or undefined
  if (value === 'null' || value === 'undefined') {
    return <span className="text-gray-500 dark:text-gray-400">{value}</span>;
  }
  
  // Check if value is a string
  if ((value.startsWith('"') && value.endsWith('"')) || (value.startsWith("'") && value.endsWith("'"))) {
    return <span className="text-green-600 dark:text-green-400">{value}</span>;
  }
  
  // Check if value is an array
  if (value.startsWith('[') && value.endsWith(']')) {
    try {
      const array = JSON.parse(value);
      if (Array.isArray(array)) {
        return renderArray(array);
      }
    } catch (e) {
      // Not a valid array
    }
  }
  
  // Default case
  return <span>{value}</span>;
};

// Helper function to render JSON-like arrays
const renderArray = (array: any[]): React.ReactNode => {
  return (
    <span>
      <span className="text-slate-600 dark:text-slate-400">[</span>
      {array.map((item, index) => (
        <Fragment key={index}>
          {index > 0 && <span className="text-slate-600 dark:text-slate-400">, </span>}
          {renderJsonValue(item, 0)}
        </Fragment>
      ))}
      <span className="text-slate-600 dark:text-slate-400">]</span>
    </span>
  );
};

// Helper to render JSON object/array with indentation
const renderJsonValue = (value: any, level: number): React.ReactNode => {
  if (value === null) {
    return <span className="text-gray-500 dark:text-gray-400">null</span>;
  }
  
  if (typeof value === 'undefined') {
    return <span className="text-gray-500 dark:text-gray-400">undefined</span>;
  }
  
  if (typeof value === 'boolean') {
    return <span className="text-green-600 dark:text-green-400">{String(value)}</span>;
  }
  
  if (typeof value === 'number') {
    return <span className="text-amber-600 dark:text-amber-400">{value}</span>;
  }
  
  if (typeof value === 'string') {
    return <span className="text-green-600 dark:text-green-400">"{value}"</span>;
  }
  
  if (Array.isArray(value)) {
    if (value.length === 0) {
      return <span className="text-slate-600 dark:text-slate-400">[]</span>;
    }
    
    if (level > 2 || isPrimitiveArray(value)) {
      // For deeply nested arrays or primitive arrays, show compact form
      return (
        <span>
          <span className="text-slate-600 dark:text-slate-400">[</span>
          {value.map((item, idx) => (
            <Fragment key={idx}>
              {idx > 0 && <span className="text-slate-600 dark:text-slate-400">, </span>}
              {renderJsonValue(item, level + 1)}
            </Fragment>
          ))}
          <span className="text-slate-600 dark:text-slate-400">]</span>
        </span>
      );
    }
    
    // For top-level and non-primitive arrays, show expanded form
    return (
      <div className="pl-4 border-l-2 border-indigo-100 dark:border-indigo-900/50 my-1">
        <span className="text-slate-600 dark:text-slate-400">[</span>
        {value.map((item, idx) => (
          <div key={idx} className="ml-2">
            {renderJsonValue(item, level + 1)}
            {idx < value.length - 1 && <span className="text-slate-600 dark:text-slate-400">,</span>}
          </div>
        ))}
        <span className="text-slate-600 dark:text-slate-400">]</span>
      </div>
    );
  }
  
  if (typeof value === 'object') {
    const entries = Object.entries(value);
    if (entries.length === 0) {
      return <span className="text-slate-600 dark:text-slate-400">{"{}"}</span>;
    }
    
    if (level > 2) {
      // For deeply nested objects, show compact form
      return (
        <span>
          <span className="text-slate-600 dark:text-slate-400">{"{"}</span>
          {entries.map(([key, val], idx) => (
            <Fragment key={key}>
              {idx > 0 && <span className="text-slate-600 dark:text-slate-400">, </span>}
              <span className="text-purple-600 dark:text-purple-400">"{key}"</span>
              <span className="text-slate-600 dark:text-slate-400">: </span>
              {renderJsonValue(val, level + 1)}
            </Fragment>
          ))}
          <span className="text-slate-600 dark:text-slate-400">{"}"}</span>
        </span>
      );
    }
    
    // For top-level objects, show expanded form
    return (
      <div className="pl-4 border-l-2 border-indigo-100 dark:border-indigo-900/50 my-1">
        <span className="text-slate-600 dark:text-slate-400">{"{"}</span>
        {entries.map(([key, val], idx) => (
          <div key={key} className="ml-2">
            <span className="text-purple-600 dark:text-purple-400">"{key}"</span>
            <span className="text-slate-600 dark:text-slate-400">: </span>
            {renderJsonValue(val, level + 1)}
            {idx < entries.length - 1 && <span className="text-slate-600 dark:text-slate-400">,</span>}
          </div>
        ))}
        <span className="text-slate-600 dark:text-slate-400">{"}"}</span>
      </div>
    );
  }
  
  // Default case
  return <span>{String(value)}</span>;
};

// Helper to check if array contains only primitive values
const isPrimitiveArray = (arr: any[]): boolean => {
  return arr.every(item => 
    item === null || 
    typeof item === 'undefined' || 
    typeof item === 'string' || 
    typeof item === 'number' || 
    typeof item === 'boolean'
  );
};

// Add language categories for organization
interface LanguageCategory {
  name: string;
  languages: string[]; // keys from JUDGE0_LANGUAGES
}

// Group languages by category for better organization
const LANGUAGE_CATEGORIES: LanguageCategory[] = [
  {
    name: "Popular",
    languages: ["71", "63", "62", "54", "73", "74", "60"]
  },
  {
    name: "JavaScript & TypeScript",
    languages: ["63", "74"]
  },
  {
    name: "Python",
    languages: ["70", "71"]
  },
  {
    name: "Java & JVM",
    languages: ["62", "78", "81", "86"]
  },
  {
    name: "C & C++",
    languages: ["48", "49", "50", "52", "53", "54", "75", "76"]
  },
  {
    name: "Systems Programming",
    languages: ["73", "45", "56"]
  },
  {
    name: "Web Development",
    languages: ["63", "74", "68", "72"]
  },
  {
    name: "Functional",
    languages: ["55", "57", "58", "65", "87"]
  },
  {
    name: "Others",
    languages: ["46", "47", "51", "59", "60", "61", "64", "66", "67", "69", "77", "79", "80", "82", "83", "84", "85", "88", "89", "43", "44"]
  }
];

// Language icons mapping (for common languages)
const LANGUAGE_ICONS: Record<string, React.ReactNode> = {
  // JavaScript
  "63": <div className="flex items-center justify-center w-full h-full"><span className="text-[11px] font-semibold text-yellow-500 dark:text-yellow-400 inline-flex">JS</span></div>,
  // TypeScript
  "74": <div className="flex items-center justify-center w-full h-full"><span className="text-[11px] font-semibold text-blue-500 dark:text-blue-400 inline-flex">TS</span></div>,
  // Python
  "70": <div className="flex items-center justify-center w-full h-full"><span className="text-[11px] font-semibold text-blue-600 dark:text-blue-400 inline-flex">Py</span></div>,
  "71": <div className="flex items-center justify-center w-full h-full"><span className="text-[11px] font-semibold text-blue-600 dark:text-blue-400 inline-flex">Py</span></div>,
  // Java
  "62": <div className="flex items-center justify-center w-full h-full"><span className="text-[11px] font-semibold text-orange-500 dark:text-orange-400 inline-flex">Ja</span></div>,
  // C
  "48": <div className="flex items-center justify-center w-full h-full"><span className="text-[11px] font-semibold text-blue-500 dark:text-blue-400 inline-flex">C</span></div>,
  "49": <div className="flex items-center justify-center w-full h-full"><span className="text-[11px] font-semibold text-blue-500 dark:text-blue-400 inline-flex">C</span></div>,
  "50": <div className="flex items-center justify-center w-full h-full"><span className="text-[11px] font-semibold text-blue-500 dark:text-blue-400 inline-flex">C</span></div>,
  // C++
  "52": <div className="flex items-center justify-center w-full h-full"><span className="text-[11px] font-semibold text-pink-500 dark:text-pink-400 inline-flex">C++</span></div>,
  "53": <div className="flex items-center justify-center w-full h-full"><span className="text-[11px] font-semibold text-pink-500 dark:text-pink-400 inline-flex">C++</span></div>,
  "54": <div className="flex items-center justify-center w-full h-full"><span className="text-[11px] font-semibold text-pink-500 dark:text-pink-400 inline-flex">C++</span></div>,
  // Go
  "60": <div className="flex items-center justify-center w-full h-full"><span className="text-[11px] font-semibold text-teal-500 dark:text-teal-400 inline-flex">Go</span></div>,
  // Rust
  "73": <div className="flex items-center justify-center w-full h-full"><span className="text-[11px] font-semibold text-orange-600 dark:text-orange-400 inline-flex">Rs</span></div>,
  // Ruby
  "72": <div className="flex items-center justify-center w-full h-full"><span className="text-[11px] font-semibold text-red-500 dark:text-red-400 inline-flex">Rb</span></div>,
  // PHP
  "68": <div className="flex items-center justify-center w-full h-full"><span className="text-[11px] font-semibold text-indigo-500 dark:text-indigo-400 inline-flex">PHP</span></div>,
};

// Helper to extract language name and version
const parseLanguageName = (fullName: string) => {
  // Match patterns like "Python (3.8.1)" or "JavaScript (Node.js 12.14.0)"
  const match = fullName.match(/^(.+?)\s+\((.+?)\)$/);
  if (match) {
    return { 
      name: match[1], 
      version: match[2] 
    };
  }
  return { name: fullName, version: "" };
};

export default function ProblemClientPage({ codingQuestion, defaultLanguage, preloadCode }: ProblemClientPageProps) {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()
  const { toast } = useToast()

  // Initialize language correctly based on defaultLanguage
  const processDefaultLanguage = (lang: string): string => {
    if (lang === "Java") return "62"; // Java ID
    return lang || "71"; // Default to Python 3.8.1 if not specified
  };
  
  const [language, setLanguage] = useState(processDefaultLanguage(defaultLanguage))
  
  // Get initial code from preloadCode
  const getInitialCode = () => {
    if (!preloadCode) return "";
    
    if (typeof preloadCode === 'string') {
      return preloadCode;
    }
    
    if (Array.isArray(preloadCode)) {
      const matchingCode = preloadCode.find(pc => pc?.languageId === language);
      return matchingCode?.code || "";
    }
    
    if (preloadCode && typeof preloadCode === 'object' && preloadCode.languageId === language) {
      return preloadCode.code || "";
    }
    
    return "";
  };
  
  const [code, setCode] = useState<string>(getInitialCode())
  
  // Get user ID from session
  const { data: userSession } = useSession();
  const userId = userSession?.user?.id || '';
  
  // Create refs for editor and monaco
  const editorRef = useRef<editor.IStandaloneCodeEditor | null>(null);
  const monacoRef = useRef<Monaco | null>(null);

  // Initialize the code sync hook
  const { isSaving, lastSaved, handleCodeChange, saveNow } = useCodeSync(
    userId,
    codingQuestion.questionId || codingQuestion.id,
    getInitialCode(),
    language,
    setCode
  );
  
  // Handle language change with code saving
  const handleLanguageChange = (newLanguage: string) => {
    // First save current code
    if (saveNow) {
      saveNow();
    }
    
    // Update language state
    setLanguage(newLanguage);
  };
  
  // Define runCodeInternal and submitCodeInternal functions up front
  const runCodeInternal = async () => {
    try {
      // Make results panel fullscreen when running code
      if (!isResultsPanelFullscreen) {
        toggleResultsPanelFullscreen();
      }
      
      setIsRunning(true);
      setExecutionMessage("Running code...");
      setExecutionStatus("info");
      setSampleExecutionStatus("info");
      setActiveTab("sample");
      setShowEvaluatingSkeletons(true);
      setSkeletonTab("sample"); // Only show skeletons in sample tab
      
      // Set a static loading phrase instead of cycling through stages
      setLoadingPhrase("Executing the code...");
      
      console.log("Selected language:", language);
      console.log("Language name from JUDGE0_LANGUAGES:", JUDGE0_LANGUAGES[language as keyof typeof JUDGE0_LANGUAGES]);
      const langId = getLanguageId(language);
      console.log("Language ID for execution:", langId);

      const response = await runCodeMutation({
        variables: {
          input: {
            sourceCode: code,
            languageId: langId,
            problemId: codingQuestion.questionId
          }
        }
      });

      // Delay hiding the skeleton to ensure smooth transition
      setTimeout(() => {
        // Clear the loading animation
        setLoadingPhrase("");
        setLoadingProgress(0);
        setShowEvaluatingSkeletons(false);
        setSkeletonTab(null);
        setIsRunning(false);

        if (response.data?.runCode) {
          const { success, message, results, allTestsPassed } = response.data.runCode;
          
          // Store results only in sample tab results
          setResults(results || []);
          setSampleTestResults(results || []);
          
          // Determine correct status based on test results
          let newStatus: "success" | "error" | "warning" | "info" = "error";
          if (success) {
            if (allTestsPassed) {
              newStatus = "success";
            } else {
              // Check if at least one test case passed
              const hasPassingTests = results && results.some((r: any) => r.isCorrect);
              newStatus = hasPassingTests ? "warning" : "error";
            }
          }
          
          setExecutionMessage(message || (success ? "Code executed successfully" : "Execution failed"));
          setExecutionStatus(newStatus);
          setSampleExecutionStatus(newStatus);
        } else {
          setExecutionMessage("Failed to run code. Please try again.");
          setExecutionStatus("error");
          setSampleExecutionStatus("error");
        }
      }, 800); // Add small delay for smoother transition
    } catch (error: any) {
      console.error("Error running code:", error);
      setExecutionMessage(`Error: ${error.message}`);
      setExecutionStatus("error");
      setSampleExecutionStatus("error");
      setLoadingPhrase("");
      setLoadingProgress(0);
      setShowEvaluatingSkeletons(false);
      setSkeletonTab(null);
      setIsRunning(false);
    }
  };

  const submitCodeInternal = async () => {
    try {
      // Make results panel fullscreen when submitting code
      if (!isResultsPanelFullscreen) {
        toggleResultsPanelFullscreen();
      }
      
      setIsSubmitting(true);
      setExecutionMessage("Submitting solution...");
      setExecutionStatus("info");
      setHiddenExecutionStatus("info");
      setActiveTab("hidden"); // Make sure we switch to the hidden testcases tab
      
      // Just show the executing state without any count information yet
      setExecutingHiddenTestcases(true);
      setShowCelebration(false);
      setHiddenTestResults([]);
      
      // Reset all counter variables to ensure the UI shows 0/total at the beginning
      setCompletedHiddenTestcases(0);
      setPassedHiddenTestcases(0);
      setHiddenTestcasesFailed(false);
      setSkippedHiddenTestcases(0);
      
      // Set a static loading phrase
      setLoadingPhrase("Executing the code...");
      
      console.log("Selected language for submission:", language);
      console.log("Language name from JUDGE0_LANGUAGES:", JUDGE0_LANGUAGES[language as keyof typeof JUDGE0_LANGUAGES]);
      const langId = getLanguageId(language);
      console.log("Language ID for submission:", langId);

      // Request to execute all testcases in parallel
      const response = await submitCodeMutation({
        variables: {
          input: {
            sourceCode: code,
            languageId: langId,
            problemId: codingQuestion.questionId,
            executeInParallel: true // Signal the server to use parallel execution
          }
        }
      });

      if (response.data?.submitCode) {
        const { success, message, results, allTestsPassed, totalTests } = response.data.submitCode;
        
        // Log the results for debugging
        console.log("API Response results:", results);
        console.log("Skipped test cases:", results.filter((r: any) => 
          r.isSkipped || r.verdict === "Skipped" || (r.status && r.status.description === "Skipped")
        ));
        console.log("Failed test cases:", results.filter((r: any) => 
          !r.isCorrect && 
          !r.isSkipped && 
          r.verdict !== "Skipped" && 
          (!r.status || r.status.description !== "Skipped")
        ));
        
        // Now that we have the response, set the total number of testcases
        setTotalHiddenTestcases(totalTests || results?.length || 0);
        
        if (success && results && results.length > 0) {
          // Simulation for UI purposes only - the server has already executed all testcases in parallel
          const processTestcases = async () => {
            let passedCount = 0;
            const processedResults = [];
            
            // Count and store passing testcases first
            const passingTestcases = results.filter((r: any) => r.isCorrect);
            const skippedTestcases = results.filter((r: any) => 
              r.isSkipped || r.verdict === "Skipped" || (r.status && r.status.description === "Skipped")
            );
            // Update each test case with explicit isSkipped flag if it's missing
            const processedSkippedTestcases = skippedTestcases.map((r: any) => ({
              ...r,
              isSkipped: true
            }));
            
            const failingTestcases = results.filter((r: any) => 
              !r.isCorrect && 
              !r.isSkipped && 
              r.verdict !== "Skipped" && 
              (!r.status || r.status.description !== "Skipped")
            );
            
            passedCount = passingTestcases.length;
            const hasFailures = failingTestcases.length > 0;
            
            // Determine which test cases were processed vs. skipped
            const processedIds = new Set([
              ...passingTestcases.map((r: any) => r.id),
              ...failingTestcases.map((r: any) => r.id)
            ]);
            
            // Create additional skipped test case placeholders if we're missing some
            const manuallySkippedTestcases = totalTests > (processedIds.size + processedSkippedTestcases.length) ? 
              Array.from({ length: totalTests - (processedIds.size + processedSkippedTestcases.length) }).map((_, idx) => ({
                id: `skipped-${idx}`,
                input: "",
                expectedOutput: "",
                actualOutput: null,
                stderr: null,
                compileOutput: null,
                status: { id: 0, description: "Skipped" },
                verdict: "Skipped",
                isCorrect: false,
                isSkipped: true,
                executionTime: null,
                memoryUsed: null
              })) : [];
            
            // If there are failures, show the first failing test case first
            if (hasFailures) {
              // Show just the first failing test case with a slight delay for visual feedback
              await new Promise(resolve => setTimeout(resolve, 150));
              
              const failedResult = failingTestcases[0];
              processedResults.push(failedResult);
              
              // Update progress counters
              setCompletedHiddenTestcases(1);
              setHiddenTestcasesFailed(true);
              
              // Update the UI with the failed result 
              setHiddenTestResults([...processedResults]);
              
              // Then show passing test cases
              for (let i = 0; i < passingTestcases.length; i++) {
                await new Promise(resolve => setTimeout(resolve, 100));
                
                const result = passingTestcases[i];
                processedResults.push(result);
                
                // Update progress counters
                setCompletedHiddenTestcases(i + 2); // +2 because we already showed 1 failing test
                setPassedHiddenTestcases(i + 1);
                
                // Update the UI with the current results
                setHiddenTestResults([...processedResults]);
              }
              
              // Finally add any remaining failing test cases (without detailed info)
              if (failingTestcases.length > 1) {
                for (let i = 1; i < failingTestcases.length; i++) {
                  await new Promise(resolve => setTimeout(resolve, 100));
                  
                  const failedResult = { 
                    ...failingTestcases[i],
                    // Hide detailed output for secondary failures
                    actualOutput: "Hidden (Multiple failures detected)",
                    stderr: null,
                    compileOutput: null
                  };
                  processedResults.push(failedResult);
                  
                  // Update progress counters
                  setCompletedHiddenTestcases(passingTestcases.length + i + 1);
                  
                  // Update the UI
                  setHiddenTestResults([...processedResults]);
                }
              }
              
              // Add any skipped test cases
              if (processedSkippedTestcases.length > 0 || manuallySkippedTestcases.length > 0) {
                await new Promise(resolve => setTimeout(resolve, 100));
                
                // Add API-marked skipped tests first
                if (processedSkippedTestcases.length > 0) {
                  processedResults.push(...processedSkippedTestcases);
                }
                
                // Then add any manually created placeholders
                if (manuallySkippedTestcases.length > 0) {
                  processedResults.push(...manuallySkippedTestcases);
                }
                
                setCompletedHiddenTestcases(processedResults.length);
                setSkippedHiddenTestcases(processedSkippedTestcases.length + manuallySkippedTestcases.length);
                setHiddenTestResults([...processedResults]);
              }
              
              // Show the failure message
              const newStatus: "success" | "error" | "warning" | "info" = passedCount > 0 ? "warning" : "error";
              const skippedCount = processedSkippedTestcases.length + manuallySkippedTestcases.length;
              const failedCount = failingTestcases.length;
              
              let statusMessage = `Execution stopped after first failure. ${passedCount}/${totalTests} passed.`;
              if (failedCount > 0) statusMessage += ` ${failedCount} failed.`;
              if (skippedCount > 0) statusMessage += ` ${skippedCount} skipped.`;
              
              setExecutionMessage(statusMessage);
              setExecutionStatus(newStatus);
              setHiddenExecutionStatus(newStatus);
            } else {
              // All tests passed
              // Show all passing test cases
              for (let i = 0; i < passingTestcases.length; i++) {
                // Simulate a slight delay for visual feedback
                await new Promise(resolve => setTimeout(resolve, 100));
                
                const result = passingTestcases[i];
                processedResults.push(result);
                
                // Update progress counters
                setCompletedHiddenTestcases(i + 1);
                setPassedHiddenTestcases(i + 1);
                
                // Update the UI with the current results
                setHiddenTestResults([...processedResults]);
              }
              
              setExecutionMessage(`All ${totalTests} test cases passed!`);
              setExecutionStatus("success");
              setHiddenExecutionStatus("success");
              setShowCelebration(true);
              // Trigger confetti celebration
              triggerConfettiCelebration();
            }
            
            // All testcases complete
            setExecutingHiddenTestcases(false);
            setIsSubmitting(false);
          };
          
          // Start processing testcases
          processTestcases();
        } else {
          setExecutingHiddenTestcases(false);
          setIsSubmitting(false);
          setExecutionMessage(message || "Failed to submit code.");
          setExecutionStatus("error");
          setHiddenExecutionStatus("error");
        }
      } else {
        setExecutingHiddenTestcases(false);
        setIsSubmitting(false);
        setExecutionMessage("Failed to submit code. Please try again.");
        setExecutionStatus("error");
        setHiddenExecutionStatus("error");
      }
    } catch (error: any) {
      console.error("Error submitting code:", error);
      setExecutingHiddenTestcases(false);
      setIsSubmitting(false);
      setExecutionMessage(`Error: ${error.message}`);
      setExecutionStatus("error");
      setHiddenExecutionStatus("error");
      setLoadingPhrase("");
      setLoadingProgress(0);
      setShowEvaluatingSkeletons(false);
      setSkeletonTab(null);
    }
  };

  // Button click handlers that call the run/submit functions  
  const handleRunCode = () => {
    // First save code if needed
    if (saveNow) {
      saveNow();
    }
    // Then run the code
    runCodeInternal();
  };
  
  const handleSubmitCode = () => {
    // First save code if needed
    if (saveNow) {
      saveNow();
    }
    // Then submit the code
    submitCodeInternal();
  };

  // Use beforeUnload to handle saving when leaving page
  useEffect(() => {
    const handleBeforeUnload = () => {
      // Save code to DB when leaving
      saveNow();
    };
    
    window.addEventListener('beforeunload', handleBeforeUnload);
    
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
      
    };
  }, [saveNow]);

  const isMobile = useIsMobile()
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  const { theme: appTheme, setTheme: setAppTheme } = useTheme()
  const [focusMode, setFocusMode] = useState(false)
  const [fontSize, setFontSize] = useState(14)
  const [tabSize, setTabSize] = useState(4)
  const [editorTheme, setEditorTheme] = useState<"vs-dark" | "light">("vs-dark")

  // Mobile view state
  const [activePanel, setActivePanel] = useState<"problem" | "code" | "results">(isMobile ? "problem" : "code")

  // Panel sizes (in percentages)
  const [leftPanelWidth, setLeftPanelWidth] = useState(isMobile ? 100 : 50)
  const [editorHeight, setEditorHeight] = useState(70)
  const [previousLayout, setPreviousLayout] = useState({ leftWidth: 50, editorHeight: 70 })

  // Refs for resizing
  const containerRef = useRef<HTMLDivElement>(null)
  const isHorizontalResizing = useRef(false)
  const isVerticalResizing = useRef(false)
  const startX = useRef(0)
  const startY = useRef(0)
  const startLeftWidth = useRef(50)
  const startEditorHeight = useRef(70)

  // Remove client-side style injection to prevent hydration mismatch
  // Now relying on predefined CSS classes in globals.css

  // Toggle focus mode for the editor
  const toggleFocusMode = () => {
    if (focusMode) {
      // Exit focus mode - restore previous layout
      setLeftPanelWidth(previousLayout.leftWidth);
      setEditorHeight(previousLayout.editorHeight);
      setFocusMode(false);
    } else {
      // Enter focus mode - save current layout and expand editor
      setPreviousLayout({ leftWidth: leftPanelWidth, editorHeight: editorHeight });
      setLeftPanelWidth(0);
      setEditorHeight(100);
      setFocusMode(true);
    }
  };

  // Update layout when screen size changes
  useEffect(() => {
    if (isMobile) {
      setLeftPanelWidth(100)
      if (!activePanel) {
        setActivePanel("problem")
      }
    } else {
      setLeftPanelWidth(50)
    }
  }, [isMobile, activePanel])

  // Handle mouse events for resizing
  useEffect(() => {
    if (isMobile) return
    const handleMouseMove = (e: MouseEvent) => {
      if (isHorizontalResizing.current && containerRef.current) {
        const containerWidth = containerRef.current.clientWidth
        const deltaX = e.clientX - startX.current
        const deltaPercent = Math.round(((deltaX / containerWidth) * 100) / 5) * 5
        const newWidth = Math.min(Math.max(20, startLeftWidth.current + deltaPercent), 80)
        setLeftPanelWidth(newWidth)
      }
      if (isVerticalResizing.current && containerRef.current) {
        const rightPanelHeight = containerRef.current.clientHeight
        const deltaY = e.clientY - startY.current
        const deltaPercent = Math.round(((deltaY / rightPanelHeight) * 100) / 5) * 5
        const newHeight = Math.min(Math.max(20, startEditorHeight.current + deltaPercent), 80)
        setEditorHeight(newHeight)
      }
    }
    const handleMouseUp = () => {
      isHorizontalResizing.current = false
      isVerticalResizing.current = false
      document.body.style.cursor = "default"
      document.body.style.userSelect = "auto"
    }
    document.addEventListener("mousemove", handleMouseMove)
    document.addEventListener("mouseup", handleMouseUp)
    return () => {
      document.removeEventListener("mousemove", handleMouseMove)
      document.removeEventListener("mouseup", handleMouseUp)
    }
  }, [isMobile])

  const startHorizontalResize = (e: React.MouseEvent) => {
    if (isMobile) return
    isHorizontalResizing.current = true
    startX.current = e.clientX
    startLeftWidth.current = leftPanelWidth
    document.body.style.cursor = "ew-resize"
    document.body.style.userSelect = "none"
    e.preventDefault()
  }

  const startVerticalResize = (e: React.MouseEvent) => {
    if (isMobile) return
    isVerticalResizing.current = true
    startY.current = e.clientY
    startEditorHeight.current = editorHeight
    document.body.style.cursor = "ns-resize"
    document.body.style.userSelect = "none"
    e.preventDefault()
  }

  // Helper: get difficulty, version, name, etc. from codingQuestion.question
  const problemNumber = codingQuestion.question?.version || 1
  const problemTitle = codingQuestion.question?.name || "Untitled Problem"
  const difficulty = codingQuestion.question?.difficulty || "EASY"
  const description = codingQuestion.questionText
  const examples = codingQuestion.testCases?.filter((tc: any) => tc.isSample || tc.isSample === undefined) || []
  const languageOptions = codingQuestion.languageOptions || []

  // Format difficulty for display
  const formatDifficulty = (difficulty: string) => {
    if (difficulty === "EASY") return "Easy";
    if (difficulty === "MEDIUM") return "Medium";
    if (difficulty === "HARD") return "Hard";
    if (difficulty === "VERY_HARD") return "Very Hard";
    return difficulty.charAt(0) + difficulty.slice(1).toLowerCase();
  }

  // Get difficulty badge styling
  const getDifficultyBadge = (diff: string) => {
    const formattedDiff = formatDifficulty(diff);
    
    switch (formattedDiff) {
      case "Easy":
        return (
          <Badge className="bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300 font-medium">
            {formattedDiff}
          </Badge>
        );
      case "Medium":
        return (
          <Badge className="bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300 font-medium">
            {formattedDiff}
          </Badge>
        );
      case "Hard":
        return (
          <Badge className="bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300 font-medium">
            {formattedDiff}
          </Badge>
                              <Fragment key={`lang-${langId}`}>
                                {showDivider && (
                                  <div className="col-span-3 h-px bg-gradient-to-r from-transparent via-slate-200 dark:via-slate-700 to-transparent my-2.5"></div>
                                )}
                                <div
                                  className={`language-item group h-14 rounded-lg px-3 transition-all duration-200 hover:shadow-md border ${
                                    isSelected 
                                      ? 'border-indigo-200 dark:border-indigo-800/50 bg-indigo-50/70 dark:bg-indigo-900/20' 
                                      : 'border-transparent hover:border-slate-200 dark:hover:border-slate-700 hover:bg-white dark:hover:bg-slate-800/60'
                                  } ${isSelected ? 'active' : ''}`}
                                  onClick={() => setLanguage(langId)}
                                >
                                  <div className="flex items-center gap-3 w-full h-full overflow-hidden">
                                    <div className="language-icon-container flex-shrink-0 w-7 h-7 bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-700 rounded-lg border border-slate-200 dark:border-slate-700 flex items-center justify-center shadow-sm group-hover:from-indigo-50 group-hover:to-indigo-100 dark:group-hover:from-indigo-900/20 dark:group-hover:to-indigo-900/30 transition-all duration-200">
                                      {LANGUAGE_ICONS[langId] || (
                                        <div className="flex items-center justify-center w-full h-full">
                                          <Code className="h-3.5 w-3.5 text-slate-400 group-hover:text-indigo-500 dark:group-hover:text-indigo-400 transition-colors" />
                                        </div>
                                      )}
                                    </div>
                                    <div className="flex flex-col leading-tight overflow-hidden flex-1">
                                      <span className="font-medium truncate text-slate-700 dark:text-slate-300 group-hover:text-indigo-700 dark:group-hover:text-indigo-300 transition-colors">
                                        {name}
                </span>
                                      {version && (
                                        <span className="version truncate text-xs text-slate-500 dark:text-slate-400 group-hover:text-indigo-500/70 dark:group-hover:text-indigo-400/70 transition-colors">
                                          {version}
                                        </span>
                                      )}
                                    </div>
                                    {isSelected && (
                                      <div className="flex-shrink-0 h-5 w-5 bg-indigo-500 dark:bg-indigo-400 rounded-full flex items-center justify-center">
                                        <Check className="h-3 w-3 text-white" />
                                      </div>
                                    )}
                                  </div>
                                </div>
                              </Fragment>
                            );
                          })}
              </div>
              
                      {searchLanguage && Object.entries(JUDGE0_LANGUAGES).filter(([id, name]) => 
                        name.toLowerCase().includes(searchLanguage.toLowerCase())).length === 0 && (
                        <div className="text-center py-12 px-4">
                          <div className="inline-flex items-center justify-center w-12 h-12 rounded-full bg-slate-100 dark:bg-slate-800 mb-3">
                            <Search className="h-6 w-6 text-slate-400" />
                          </div>
                          <h4 className="text-base font-medium text-slate-700 dark:text-slate-300 mb-1">No Results Found</h4>
                          <p className="text-sm text-slate-500 dark:text-slate-400 max-w-sm mx-auto">
                            We couldn't find any programming language matching "{searchLanguage}"
                          </p>
                        </div>
                      )}
                    </div>
                    
                    <div className="border-t border-slate-200 dark:border-slate-700 px-4 py-3 flex justify-between items-center bg-gradient-to-r from-slate-50 to-white dark:from-slate-900 dark:to-slate-800">
                      <div className="flex items-center">
                        <div className="w-2 h-2 rounded-full bg-green-500 mr-2"></div>
                        <div className="text-sm text-slate-600 dark:text-slate-300">
                          Currently using: <span className="font-semibold text-indigo-600 dark:text-indigo-400 ml-1">{parseLanguageName(JUDGE0_LANGUAGES[language as keyof typeof JUDGE0_LANGUAGES]).name}</span>
                        </div>
                      </div>
                      {searchLanguage && (
                        <Button 
                          variant="outline"
                          size="sm" 
                          onClick={() => setSearchLanguage("")}
                          className="h-8 text-xs border-indigo-200 dark:border-indigo-800/50 bg-white dark:bg-slate-800"
                        >
                          <X className="h-3.5 w-3.5 mr-1.5" />
                          Clear Search
                        </Button>
                      )}
                    </div>
                  </PopoverContent>
                </Popover>
                {/* Move Focus Mode button to the right, before Format */}
              </div>
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={toggleFocusMode}
                  className="gap-1.5 text-indigo-700 dark:text-indigo-300 border-indigo-200 dark:border-indigo-800/50 hover:bg-indigo-50 dark:hover:bg-indigo-900/30"
                >
                  {focusMode ? (
                    <>
                      <Minimize2 className="h-3.5 w-3.5 text-indigo-500 dark:text-indigo-400" />
                      <span className="hidden sm:inline">Exit Focus</span>
                    </>
                  ) : (
                    <>
                      <Maximize2 className="h-3.5 w-3.5 text-indigo-500 dark:text-indigo-400" />
                      <span className="hidden sm:inline">Focus Mode</span>
                    </>
                  )}
                </Button>
                {/* Format button with spinner and tooltip */}
                <Popover>
                  <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  size="sm"
                  className="hidden md:flex text-indigo-700 dark:text-indigo-300 border-indigo-200 dark:border-indigo-800/50 hover:bg-indigo-50 dark:hover:bg-indigo-900/30"
                      onClick={formatCode}
                      disabled={isFormatting}
                    >
                      {isFormatting ? (
                        <>
                          <span className="relative h-3.5 w-3.5 mr-1.5">
                            <RotateCw className="h-3.5 w-3.5 text-indigo-500 dark:text-indigo-400 animate-spin" />
                            <span className="absolute inset-0 h-3.5 w-3.5 bg-indigo-100 dark:bg-indigo-900/30 rounded-full animate-ping opacity-75"></span>
                          </span>
                          <span>Formatting...</span>
                        </>
                      ) : formatSuccess ? (
                        <>
                          <span className="relative h-3.5 w-3.5 mr-1.5">
                            <Check className="h-3.5 w-3.5 text-green-500 dark:text-green-400" />
                            <span className="absolute inset-0 h-3.5 w-3.5 bg-green-100 dark:bg-green-900/30 rounded-full animate-ping opacity-75"></span>
                          </span>
                          <span className="text-green-600 dark:text-green-400">Formatted!</span>
                        </>
                      ) : noChangesNeeded ? (
                        <>
                          <span className="relative h-3.5 w-3.5 mr-1.5">
                            <Check className="h-3.5 w-3.5 text-blue-500 dark:text-blue-400" />
                          </span>
                          <span className="text-blue-600 dark:text-blue-400">Already formatted</span>
                        </>
                      ) : (
                        <>
                          <Code className="h-3.5 w-3.5 mr-1.5 text-indigo-500 dark:text-indigo-400" />
                          <span>Format</span>
                        </>
                      )}
                </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-72 p-3 text-xs" align="end">
                    <div className="text-slate-700 dark:text-slate-300 space-y-2.5">
                      <div>
                        <p className="font-medium text-sm">Format your code</p>
                        <p className="text-slate-500 dark:text-slate-400 mt-1">
                          Formats the code according to language-specific rules.
                        </p>
                      </div>
                      
                      <div className="border-t border-slate-200 dark:border-slate-700 pt-2.5">
                        <p className="font-medium">Supported Languages:</p>
                        <ul className="mt-1 space-y-1 text-slate-500 dark:text-slate-400">
                          <li className="flex items-center">
                            <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                            Java, JavaScript, TypeScript, Python, C, C++
                          </li>
                          <li className="flex items-center">
                            <span className="w-2 h-2 bg-yellow-500 rounded-full mr-2"></span>
                            Other languages use basic indentation
                          </li>
                        </ul>
                      </div>
                      
                      <div className="border-t border-slate-200 dark:border-slate-700 pt-2.5">
                        <p className="font-medium">Keyboard shortcuts:</p>
                        <div className="flex items-center mt-1">
                          <kbd className="px-1.5 py-0.5 bg-slate-100 dark:bg-slate-800 rounded border border-slate-200 dark:border-slate-700 font-mono text-[10px] mr-1.5">
                            {appTheme === 'dark' ? 'Shift+Alt+F' : 'Alt+Shift+F'}
                          </kbd>
                          <span className="text-slate-500 dark:text-slate-400">or</span>
                          <kbd className="px-1.5 py-0.5 bg-slate-100 dark:bg-slate-800 rounded border border-slate-200 dark:border-slate-700 font-mono text-[10px] mx-1.5">
                            Ctrl+K
                          </kbd>
                          <kbd className="px-1.5 py-0.5 bg-slate-100 dark:bg-slate-800 rounded border border-slate-200 dark:border-slate-700 font-mono text-[10px]">
                            Ctrl+F
                          </kbd>
                        </div>
                      </div>
                    </div>
                  </PopoverContent>
                </Popover>
                
                <Button
                  variant="ghost"
                  size="sm"
                  className="text-slate-700 dark:text-slate-300 hover:bg-indigo-50 dark:hover:bg-indigo-900/30 hover:text-indigo-700 dark:hover:text-indigo-30"
                  asChild
                >
                  <Popover>
                    <PopoverTrigger asChild>
                      <span><Settings className="h-4 w-4 cursor-pointer" /></span>
                    </PopoverTrigger>
                    <PopoverContent align="end" className="w-72 p-0 border border-indigo-200/80 dark:border-indigo-800/50 shadow-xl rounded-xl overflow-hidden">
                      {/* Gradient purple header */}
                      <div className="bg-gradient-to-r from-indigo-500 via-purple-500 to-indigo-600 dark:from-indigo-600 dark:via-purple-600 dark:to-indigo-700 p-4 relative flex items-center justify-between">
                        <div className="absolute top-0 left-0 right-0 h-px bg-white/20"></div>
                        <div className="absolute inset-0 bg-grid-white/[0.05] bg-[length:16px_16px]"></div>
                         <h3 className="text-sm font-medium text-purple-900 dark:text-purple-100 flex items-center">
                          <Settings className="h-4 w-4 mr-2 text-white/80" />
                          <span className="text-white font-semibold">Editor Settings</span>
                         </h3>
                        <div className="h-5 w-5 rounded-full bg-white/10 flex items-center justify-center">
                          <Code className="h-3 w-3 text-white/70" />
                        </div>
                      </div>
                       
                      <div className="p-4 bg-gradient-to-b from-white to-indigo-50/50 dark:from-slate-900 dark:to-purple-900/20 border-t border-indigo-100 dark:border-indigo-900/30">
                         <div className="mb-4">
                          <label className="block text-xs font-medium mb-2 text-indigo-900 dark:text-indigo-100 flex items-center justify-between">
                             <span className="flex items-center">
                              <MonitorSmartphone className="h-3.5 w-3.5 mr-1.5 text-indigo-500 dark:text-indigo-300" />
                              Theme
                             </span>
                            <span className="text-xs font-medium text-indigo-700 dark:text-indigo-300">{editorTheme === "vs-dark" ? "Dark" : "Light"}</span>
                           </label>
                        <div className="flex gap-2">
                             <button 
                               onClick={() => setEditorTheme("vs-dark")}
                               className={`px-3 py-1.5 rounded-md text-xs font-medium transition-all duration-200 flex-1 ${
                                 editorTheme === "vs-dark" 
                                 ? "bg-gradient-to-r from-indigo-600 to-purple-600 text-white shadow-sm" 
                                 : "bg-indigo-50 dark:bg-indigo-900/30 text-indigo-700 dark:text-indigo-300 hover:bg-indigo-100 dark:hover:bg-indigo-800/40"
                               }`}>
                               <span className="flex items-center justify-center">
                                 <Moon className="h-3 w-3 mr-1.5" />
                                 Dark
                               </span>
                             </button>
                             <button 
                               onClick={() => setEditorTheme("light")}
                               className={`px-3 py-1.5 rounded-md text-xs font-medium transition-all duration-200 flex-1 ${
                                 editorTheme === "light" 
                                 ? "bg-gradient-to-r from-indigo-600 to-purple-600 text-white shadow-sm" 
                                 : "bg-indigo-50 dark:bg-indigo-900/30 text-indigo-700 dark:text-indigo-300 hover:bg-indigo-100 dark:hover:bg-indigo-800/40"
                               }`}>
                               <span className="flex items-center justify-center">
                                 <Sun className="h-3 w-3 mr-1.5" />
                                 Light
                               </span>
                             </button>
                        </div>
                      </div>
                         <div className="mb-4">
                          <label className="block text-xs font-medium mb-2 text-indigo-900 dark:text-indigo-100 flex items-center justify-between">
                             <span className="flex items-center">
                              <Type className="h-3.5 w-3.5 mr-1.5 text-indigo-500 dark:text-indigo-300" />
                              Font Size
                             </span>
                            <span className="text-xs font-medium text-indigo-700 dark:text-indigo-300">{fontSize}px</span>
                           </label>
                           <div className="relative mt-2">
                            <div className="h-1.5 bg-indigo-100 dark:bg-indigo-900/30 rounded-full w-full overflow-hidden">
                               <div
                                className="h-full bg-gradient-to-r from-indigo-500 to-purple-500 dark:from-indigo-400 dark:to-purple-400"
                                style={{ width: `${((fontSize - 12) / 12) * 100}%` }}
                              ></div>
                      </div>
                             <input 
                               type="range" 
                               min="12" 
                               max="24" 
                               value={fontSize} 
                               onChange={e => setFontSize(Number(e.target.value))} 
                               className="absolute inset-0 w-full h-1.5 opacity-0 cursor-pointer" 
                             />
                      </div>
                           <div className="flex justify-between mt-1.5">
                            <span className="text-[10px] text-indigo-500/70 dark:text-indigo-400/70">12px</span>
                            <span className="text-[10px] text-indigo-500/70 dark:text-indigo-400/70">24px</span>
                           </div>
                         </div>
                         <div className="mb-4">
                          <label className="block text-xs font-medium mb-2 text-indigo-900 dark:text-indigo-100 flex items-center justify-between">
                             <span className="flex items-center">
                              <Indent className="h-3.5 w-3.5 mr-1.5 text-indigo-500 dark:text-indigo-300" />
                              Tab Size
                             </span>
                            <span className="text-xs font-medium text-indigo-700 dark:text-indigo-300">{tabSize} spaces</span>
                           </label>
                           <div className="relative mt-2">
                            <div className="h-1.5 bg-indigo-100 dark:bg-indigo-900/30 rounded-full w-full overflow-hidden">
                               <div 
                                className="h-full bg-gradient-to-r from-purple-500 to-pink-500 dark:from-purple-400 dark:to-pink-400" 
                                style={{ width: `${((tabSize - 2) / 6) * 100}%` }}
                              ></div>
                             </div>
                             <input 
                               type="range" 
                               min="2" 
                               max="8" 
                               value={tabSize} 
                               onChange={e => setTabSize(Number(e.target.value))} 
                               className="absolute inset-0 w-full h-1.5 opacity-0 cursor-pointer" 
                             />
                           </div>
                           <div className="flex justify-between mt-1.5">
                            <span className="text-[10px] text-indigo-500/70 dark:text-indigo-400/70">2 spaces</span>
                            <span className="text-[10px] text-indigo-500/70 dark:text-indigo-400/70">8 spaces</span>
                           </div>
                         </div>
                         
                         {/* Footer with reset button */}
                         <div className="pt-3 mt-3 border-t border-indigo-200 dark:border-indigo-800/50">
                      <button
                        onClick={() => setCode(preloadCode)}
                             className="w-full py-2.5 rounded-lg bg-gradient-to-r from-indigo-500 via-purple-500 to-indigo-600 text-white font-medium text-xs hover:from-indigo-600 hover:via-purple-600 hover:to-indigo-700 transition-all duration-200 shadow-sm hover:shadow-md shadow-indigo-500/10 hover:shadow-indigo-500/20 relative overflow-hidden group"
                      >
                             <span className="absolute inset-0 w-full h-full bg-[linear-gradient(90deg,rgba(255,255,255,0.1)_0%,rgba(255,255,255,0.2)_20%,rgba(255,255,255,0)_60%)] translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000"></span>
                             <span className="relative flex items-center justify-center">
                               <RefreshCw className="h-3 w-3 mr-1.5" />
                        Reset Code
                             </span>
                      </button>
                         </div>
                       </div>
                    </PopoverContent>
                  </Popover>
                </Button>
              </div>
            </div>
            
            <div className="flex-1 overflow-auto" style={{ minHeight: 0 }}>
              {/* Editor wrapper with subtle background gradient */}
              <div className="h-full w-full relative bg-gradient-to-br from-slate-800 to-slate-900">
                {/* Editor component */}
                <CodeEditor 
                  code={code} 
                  onChange={setCode} 
                  language={language} 
                  theme={editorTheme} 
                  fontSize={fontSize} 
                  tabSize={tabSize}
                  onEditorMount={(editor, monaco) => {
                    editorRef.current = editor;
                    monacoRef.current = monaco;
                  }}
                />
              </div>
            </div>
          </div>

          {/* Vertical resizer - only visible on desktop */}
          {!isMobile && (
            <div
              className="relative h-1 w-full flex-shrink-0 z-10 group cursor-ns-resize"
              onMouseDown={startVerticalResize}
            >
              <div className="absolute inset-0 h-1 w-full bg-indigo-100 dark:bg-indigo-900/30 group-hover:bg-indigo-300 dark:group-hover:bg-indigo-700/50 transition-colors duration-300"></div>
              <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 h-6 w-12 bg-white dark:bg-slate-800 rounded-md border border-indigo-200 dark:border-indigo-800/50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300 shadow-sm">
                <Grip className="h-4 w-4 text-indigo-500 dark:text-indigo-400 rotate-90" />
              </div>
            </div>
          )}

          {/* Results panel */}
          <div
            className={`flex flex-col overflow-hidden ${
              isMobile ? (activePanel === "results" ? "block" : "hidden") : ""
            }`}
            style={{
              flexBasis: isMobile ? "100%" : `${100 - editorHeight}%`,
              flexGrow: 1,
              flexShrink: 1,
              minHeight: 0,
              maxHeight: isMobile ? "100%" : `${100 - editorHeight}%`,
              height: isMobile ? "100%" : undefined,
              transition: "all 0.3s ease-in-out" // Add smooth transition
            }}
          >
            <div className="flex items-center justify-between p-2 md:p-3 bg-white dark:bg-black border-b border-indigo-100 dark:border-indigo-900/50">
              <div className="flex items-center gap-2">
                <Terminal className="h-4 w-4 text-indigo-500 dark:text-indigo-400" />
                <span className="font-medium text-slate-700 dark:text-slate-300">Results</span>
              </div>
              
              <div className="flex items-center gap-2">
                <Button 
                  variant="ghost" 
                  size="icon" 
                  className="h-7 w-7 rounded-md hover:bg-indigo-50 dark:hover:bg-indigo-900/30 text-slate-500 dark:text-slate-400 hover:text-indigo-700 dark:hover:text-indigo-300"
                  onClick={toggleResultsPanelFullscreen}
                  aria-label={isResultsPanelFullscreen ? "Exit fullscreen" : "Fullscreen"}
                >
                  {isResultsPanelFullscreen ? (
                    <Minimize2 className="h-4 w-4" />
                  ) : (
                    <Maximize2 className="h-4 w-4" />
                  )}
                </Button>
              </div>
            </div>
            
            <div className="flex-1 relative bg-gradient-to-br from-slate-50 to-white dark:from-slate-900 dark:to-slate-800/80 overflow-auto">
              {/* Background decorative elements */}
              <div className="absolute top-1/4 left-1/4 w-32 h-32 bg-indigo-50/50 dark:bg-indigo-900/20 rounded-full blur-3xl -z-0"></div>
              <div className="absolute bottom-1/4 right-1/4 w-40 h-40 bg-purple-50/30 dark:bg-purple-900/10 rounded-full blur-3xl -z-0"></div>
              
              {/* Tabs for Results Panel */}
              <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full p-4 relative z-10">
                <TabsList className="bg-slate-100 dark:bg-slate-800/70 p-1 rounded-lg overflow-hidden backdrop-blur-sm border border-slate-200/80 dark:border-slate-700/30 shadow-sm mb-3 w-full flex">
                  <TabsTrigger
                    value="sample"
                    className="flex-1 rounded-md py-1.5 data-[state=active]:bg-white data-[state=active]:dark:bg-black/95 data-[state=active]:text-indigo-700 data-[state=active]:dark:text-indigo-300 data-[state=active]:shadow-sm relative overflow-hidden group"
                  >
                    <div className="absolute inset-0 opacity-0 group-data-[state=active]:opacity-100 transition-opacity">
                      <div className="absolute inset-x-0 -bottom-1 h-0.5 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500"></div>
                    </div>
                    <FileText className="h-3.5 w-3.5 mr-1.5 text-indigo-500/70 dark:text-indigo-400/70 group-data-[state=active]:text-indigo-600 dark:group-data-[state=active]:text-indigo-400" />
                    Sample Testcases
                  </TabsTrigger>
                  <TabsTrigger
                    value="hidden"
                    className="flex-1 rounded-md py-1.5 data-[state=active]:bg-white data-[state=active]:dark:bg-black/95 data-[state=active]:text-indigo-700 data-[state=active]:dark:text-indigo-300 data-[state=active]:shadow-sm relative overflow-hidden group"
                  >
                    <div className="absolute inset-0 opacity-0 group-data-[state=active]:opacity-100 transition-opacity">
                      <div className="absolute inset-x-0 -bottom-1 h-0.5 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500"></div>
                    </div>
                    <BarChart2 className="h-3.5 w-3.5 mr-1.5 text-indigo-500/70 dark:text-indigo-400/70 group-data-[state=active]:text-indigo-600 dark:group-data-[state=active]:text-indigo-400" />
                    Hidden Testcases
                  </TabsTrigger>
                  <TabsTrigger
                    value="custom"
                    className="flex-1 rounded-md py-1.5 data-[state=active]:bg-white data-[state=active]:dark:bg-black/95 data-[state=active]:text-indigo-700 data-[state=active]:dark:text-indigo-300 data-[state=active]:shadow-sm relative overflow-hidden group"
                  >
                    <div className="absolute inset-0 opacity-0 group-data-[state=active]:opacity-100 transition-opacity">
                      <div className="absolute inset-x-0 -bottom-1 h-0.5 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500"></div>
                    </div>
                    <Sparkles className="h-3.5 w-3.5 mr-1.5 text-indigo-500/70 dark:text-indigo-400/70 group-data-[state=active]:text-indigo-600 dark:group-data-[state=active]:text-indigo-400" />
                    Custom Testcase
                  </TabsTrigger>
                </TabsList>
                
                {/* Sample Testcases Tab */}
                <TabsContent value="sample" className="focus-visible:outline-none focus-visible:ring-0">
                  {showEvaluatingSkeletons && skeletonTab === "sample" ? (
                    <div className="space-y-4 animate-in fade-in-50 slide-in-from-bottom-3 duration-300">
                      {/* Summary skeleton */}
                      <div className="flex items-center justify-between mb-2">
                        <Skeleton className="h-5 w-40" />
                        <Skeleton className="h-6 w-28 rounded-full" />
                      </div>
                      
                      {/* Test cases skeletons */}
                      <div className="bg-white dark:bg-black rounded-lg shadow-sm overflow-hidden border border-slate-200 dark:border-slate-700/50">
                        {/* Header skeleton */}
                        <div className="px-4 py-3 border-b border-slate-200 dark:border-slate-700/50 bg-gradient-to-r from-slate-50 to-slate-100/50 dark:from-slate-800/70 dark:to-slate-800/50 flex justify-between">
                          <div className="flex items-center gap-2">
                            <Skeleton className="h-6 w-6 rounded-full" />
                            <Skeleton className="h-5 w-24" />
                          </div>
                          <Skeleton className="h-6 w-20 rounded-full" />
                        </div>
                        
                        {/* Content skeleton */}
                        <div className="p-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                          {/* Input skeleton */}
                          <div className="rounded-lg overflow-hidden border border-slate-200 dark:border-slate-700/50">
                            <div className="bg-slate-50 dark:bg-slate-800/60 px-3 py-1.5 border-b border-slate-200 dark:border-slate-700/50">
                              <Skeleton className="h-4 w-16" />
                            </div>
                            <div className="p-3 space-y-2">
                              <Skeleton className="h-4 w-full" />
                              <Skeleton className="h-4 w-3/4" />
                              <Skeleton className="h-4 w-1/2" />
                            </div>
                          </div>
                          
                          {/* Expected Output skeleton */}
                          <div className="rounded-lg overflow-hidden border border-slate-200 dark:border-slate-700/50">
                            <div className="bg-slate-50 dark:bg-slate-800/60 px-3 py-1.5 border-b border-slate-200 dark:border-slate-700/50">
                              <Skeleton className="h-4 w-36" />
                            </div>
                            <div className="p-3 space-y-2">
                              <Skeleton className="h-4 w-full" />
                              <Skeleton className="h-4 w-2/3" />
                              <Skeleton className="h-4 w-1/4" />
                            </div>
                          </div>
                          
                          {/* Your Output skeleton - professional loading style */}
                          <div className="rounded-lg overflow-hidden md:col-span-2 border border-indigo-200 dark:border-indigo-900/30 relative overflow-hidden">
                            <div className="absolute inset-0 bg-gradient-to-r from-indigo-50/50 via-purple-50/50 to-indigo-50/50 dark:from-indigo-900/20 dark:via-purple-900/20 dark:to-indigo-900/20 animate-gradient-x"></div>
                            <div className="px-3 py-1.5 border-b border-indigo-200 dark:border-indigo-900/30 bg-slate-50 dark:bg-slate-800/60 relative z-10 flex justify-between items-center">
                              <div className="flex items-center space-x-2">
                                <div className="h-2.5 w-2.5 rounded-full bg-indigo-500 animate-pulse-opacity"></div>
                                <span className="text-xs font-medium text-indigo-700 dark:text-indigo-300">
                                  Executing the code...
                                </span>
                              </div>
                            </div>
                            <div className="relative z-10">
                              <div className="p-3 space-y-2">
                                <Skeleton className="h-5 w-full bg-indigo-100/70 dark:bg-indigo-900/30" />
                                <Skeleton className="h-5 w-4/5 bg-indigo-100/70 dark:bg-indigo-900/30" />
                                <Skeleton className="h-5 w-2/3 bg-indigo-100/70 dark:bg-indigo-900/30" />
                              </div>
                            </div>
                          </div>
                        </div>
                        
                        {/* Footer skeleton */}
                        <div className="bg-slate-50 dark:bg-slate-800/50 px-4 py-2 border-t border-slate-200 dark:border-slate-700/50 flex justify-between items-center">
                          <Skeleton className="h-4 w-32" />
                          <Skeleton className="h-4 w-32" />
                        </div>
                      </div>
                    </div>
                  ) : sampleTestResults.length > 0 && activeTab === "sample" ? (
                    <div className="space-y-4 animate-in fade-in-50 slide-in-from-bottom-3 duration-500">
                      {/* Summary badge */}
                      <div className="flex items-center justify-between mb-2">
                        <div className="text-sm text-slate-700 dark:text-slate-300">
                          <span className="font-medium">{sampleTestResults.length}</span> sample test cases evaluated
                        </div>
                        {sampleExecutionStatus && (
                          <div className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium shadow-sm
                            ${sampleExecutionStatus === 'success' ? 'bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 border border-green-200/70 dark:border-green-900/30 text-green-700 dark:text-green-400' : 
                            sampleExecutionStatus === 'warning' ? 'bg-gradient-to-r from-amber-50 to-orange-50 dark:from-amber-900/20 dark:to-orange-900/20 border border-amber-200/70 dark:border-amber-900/30 text-amber-700 dark:text-amber-400' :
                            'bg-gradient-to-r from-red-50 to-rose-50 dark:from-red-900/20 dark:to-rose-900/20 border border-red-200/70 dark:border-red-900/30 text-red-700 dark:text-red-400'}`}>
                            {sampleExecutionStatus === 'success' ? (
                              <><Check className="h-3 w-3 mr-1.5" />All Sample Testcases Passed</>
                            ) : sampleExecutionStatus === 'warning' ? (
                              <><AlertTriangle className="h-3 w-3 mr-1.5" />Partially Passed</>
                            ) : (
                              <><XCircle className="h-3 w-3 mr-1.5" />No Sample Testcases Passed</>
                            )}
                        </div>
                        )}
                    </div>
                    
                      {/* Nested tabs for multiple test cases */}
                      <Tabs defaultValue={`sample-testcase-0`} className="w-full">
                        <TabsList className="bg-gradient-to-r from-slate-100/90 to-indigo-50/80 dark:from-slate-800/70 dark:to-indigo-900/30 p-1 rounded-lg overflow-hidden backdrop-blur-sm border border-slate-200/80 dark:border-slate-700/30 shadow-sm mb-3 w-full flex flex-wrap">
                          {sampleTestResults.map((result, idx) => (
                            <TabsTrigger
                              key={`sample-trigger-${result.id || idx}`}
                              value={`sample-testcase-${idx}`}
                              className="flex-1 min-w-[100px] rounded-md py-2 data-[state=active]:bg-white data-[state=active]:dark:bg-black/95 data-[state=active]:text-indigo-700 data-[state=active]:dark:text-indigo-300 data-[state=active]:shadow-sm relative overflow-hidden group transition-all duration-150"
                            >
                              <div className="absolute inset-0 opacity-0 group-data-[state=active]:opacity-100 transition-opacity duration-300">
                                <div className="absolute inset-x-0 -bottom-1 h-0.5 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500"></div>
                                <div className="absolute inset-0 bg-gradient-to-br from-indigo-50/50 to-purple-50/30 dark:from-indigo-900/30 dark:to-purple-900/20 opacity-0 group-data-[state=active]:opacity-100 transition-opacity"></div>
                              </div>
                              <div className="flex items-center justify-center gap-1.5">
                                <div className={`w-5 h-5 rounded-full flex items-center justify-center text-white text-xs font-medium
                                  ${result.isCorrect 
                                    ? 'bg-gradient-to-br from-green-500 to-emerald-600' 
                                    : 'bg-gradient-to-br from-red-500 to-rose-600'}`}>
                                  {result.isCorrect ? <Check className="h-3 w-3" /> : <X className="h-3 w-3" />}
                                </div>
                                <span className="hidden sm:inline font-medium text-sm group-data-[state=active]:text-indigo-600 dark:group-data-[state=active]:text-indigo-400">Test {idx + 1}</span>
                              </div>
                              <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-transparent via-indigo-500/30 to-transparent opacity-0 group-hover:opacity-100 group-data-[state=active]:opacity-0 transition-opacity"></div>
                            </TabsTrigger>
                          ))}
                        </TabsList>
                        
                        {sampleTestResults.map((result, idx) => (
                          <TabsContent key={`sample-content-${result.id || idx}`} value={`sample-testcase-${idx}`} className="focus-visible:outline-none focus-visible:ring-0">
                            <div className="bg-white dark:bg-black rounded-lg shadow-sm overflow-hidden border border-slate-200 dark:border-slate-700/50">
                              <div className={`px-4 py-2 border-b border-slate-200 dark:border-slate-700/50 flex items-center justify-between
                                ${result.isCorrect 
                                  ? 'bg-gradient-to-r from-green-50 to-green-100/50 dark:from-green-900/20 dark:to-green-900/10' 
                                  : 'bg-gradient-to-r from-red-50 to-red-100/50 dark:from-red-900/20 dark:to-red-900/10'}`}>
                                <div className="flex items-center gap-2">
                                  <div className={`w-5 h-5 rounded-full flex items-center justify-center text-white text-xs font-medium
                                    ${result.isCorrect 
                                      ? 'bg-green-500' 
                                      : 'bg-red-500'}`}>
                                    {idx + 1}
                                  </div>
                                  <span className="font-medium text-slate-700 dark:text-slate-300">
                                    {result.isCorrect ? 'Passed' : 'Failed'}
                                  </span>
                                </div>
                                
                                <div className="flex items-center">
                                  <span className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium
                                    ${result.isCorrect 
                                      ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400' 
                                      : 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400'}`}>
                                    {result.isCorrect ? (
                                      <><Check className="h-3 w-3 mr-1" />Correct</>
                                    ) : (
                                      <><X className="h-3 w-3 mr-1" />Incorrect</>
                                    )}
                                  </span>
                                </div>
                              </div>
                              
                              <div className="p-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="rounded-lg overflow-hidden border border-slate-200 dark:border-slate-700/50">
                                  <div className="bg-slate-50 dark:bg-slate-800/60 px-3 py-1.5 border-b border-slate-200 dark:border-slate-700/50 text-xs font-medium text-slate-700 dark:text-slate-300">
                                    Input
                                  </div>
                                  <div className="p-3 font-mono text-sm bg-white dark:bg-slate-800/30 text-slate-700 dark:text-slate-300">
                                    {formatTestCase(result.input)}
                                  </div>
                                </div>
                                
                                <div className="rounded-lg overflow-hidden border border-slate-200 dark:border-slate-700/50">
                                  <div className="bg-slate-50 dark:bg-slate-800/60 px-3 py-1.5 border-b border-slate-200 dark:border-slate-700/50 text-xs font-medium text-slate-700 dark:text-slate-300">
                                    Expected Output
                                  </div>
                                  <div className="p-3 font-mono text-sm bg-white dark:bg-slate-800/30 text-slate-700 dark:text-slate-300">
                                    {formatTestCase(result.expectedOutput)}
                                  </div>
                                </div>
                                
                                {/* Only show the Your Output section if there are no errors/warnings */}
                                {!(result.stderr || result.compileOutput) && (
                                  <div className={`rounded-lg overflow-hidden md:col-span-2 
                                    ${result.isCorrect 
                                      ? 'border border-green-200 dark:border-green-900/30' 
                                      : 'border border-red-200 dark:border-red-900/30'}`}>
                                    <div className={`px-3 py-1.5 border-b flex items-center
                                      ${result.isCorrect 
                                        ? 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-900/30 text-green-800 dark:text-green-400' 
                                        : 'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-900/30 text-red-800 dark:text-red-400'}`}>
                                      {result.isCorrect ? (
                                    <Check className="h-3 w-3 mr-1.5" />
                                      ) : (
                                        <X className="h-3 w-3 mr-1.5" />
                                      )}
                                    Your Output
                                  </div>
                                  <div className="p-3 font-mono text-sm bg-white dark:bg-slate-800/30 text-slate-700 dark:text-slate-30">
                                      {formatTestCase(result.actualOutput)}
                                  </div>
                                </div>
                                )}
                                
                                {/* Show error messages if there are any */}
                                {(result.stderr || result.compileOutput) && (
                                  <div className="rounded-lg overflow-hidden border border-amber-200 dark:border-amber-900/30 md:col-span-2">
                                    <div className="bg-amber-50 dark:bg-amber-900/20 px-3 py-1.5 border-b border-amber-200 dark:border-amber-900/30 text-xs font-medium text-amber-800 dark:text-amber-400 flex items-center">
                                      <AlertTriangle className="h-3 w-3 mr-1.5" />
                                      Errors/Warnings
                              </div>
                                    <div className="p-3 font-mono text-sm bg-white dark:bg-slate-800/30 text-slate-700 dark:text-slate-30">
                                      {result.compileOutput && (
                                        <div className="mb-2">
                                          <div className="text-xs font-medium text-slate-500 dark:text-slate-400 mb-1">Compile Output:</div>
                                          <div className="text-red-600 dark:text-red-400 whitespace-pre-wrap">{result.compileOutput}</div>
                            </div>
                                      )}
                                      {result.stderr && (
                                        <div>
                                          <div className="text-xs font-medium text-slate-500 dark:text-slate-400 mb-1">Standard Error:</div>
                                          <div className="text-red-600 dark:text-red-400 whitespace-pre-wrap">{result.stderr}</div>
                    </div>
                                      )}
              </div>
            </div>
                  )}
                              </div>
                              
                              <div className="bg-slate-50 dark:bg-slate-800/50 px-4 py-2 border-t border-slate-200 dark:border-slate-700/50 flex justify-between items-center">
                                <div className="flex items-center">
                                  <Clock className="h-3.5 w-3.5 text-slate-400 dark:text-slate-500 mr-1.5" />
                                  <span className="text-xs text-slate-500 dark:text-slate-400">Execution Time: {result.executionTime || 'N/A'}</span>
                        </div>
                                <div className="flex items-center">
                                  <Cpu className="h-3.5 w-3.5 text-slate-400 dark:text-slate-500 mr-1.5" />
                                  <span className="text-xs text-slate-500 dark:text-slate-400">Memory Used: {result.memoryUsed || 'N/A'}</span>
                      </div>
                    </div>
                      </div>
                          </TabsContent>
                        ))}
                      </Tabs>
                      
                      {/* Performance summary */}
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-3 w-full">
                      <div className="bg-white dark:bg-black/60 p-3 rounded-lg border border-slate-200 dark:border-slate-700/50 flex flex-col items-center text-center">
                        <div className="w-8 h-8 rounded-full bg-amber-100 dark:bg-amber-900/30 flex items-center justify-center mb-2">
                            <Clock className="h-4 w-4 text-amber-600 dark:text-amber-400" />
                        </div>
                          <div className="text-xs text-slate-500 dark:text-slate-400 mb-1">Execution Time</div>
                          <div className="font-medium text-slate-700 dark:text-slate-300">
                            {sampleTestResults[0]?.executionTime || 'N/A'}
                          </div>
                      </div>
                      <div className="bg-white dark:bg-black/60 p-3 rounded-lg border border-slate-200 dark:border-slate-700/50 flex flex-col items-center text-center">
                        <div className="w-8 h-8 rounded-full bg-green-100 dark:bg-green-900/30 flex items-center justify-center mb-2">
                          <Check className="h-4 w-4 text-green-600 dark:text-green-400" />
                        </div>
                          <div className="text-xs text-slate-500 dark:text-slate-400 mb-1">Test Cases</div>
                          <div className="font-medium text-slate-700 dark:text-slate-300">
                            {sampleTestResults.filter(r => r.isCorrect).length}/{sampleTestResults.length} Passed
                          </div>
                      </div>
                      <div className="bg-white dark:bg-black/60 p-3 rounded-lg border border-slate-200 dark:border-slate-700/50 flex flex-col items-center text-center">
                        <div className="w-8 h-8 rounded-full bg-purple-100 dark:bg-purple-900/30 flex items-center justify-center mb-2">
                            <Cpu className="h-4 w-4 text-purple-600 dark:text-purple-400" />
                        </div>
                          <div className="text-xs text-slate-500 dark:text-slate-400 mb-1">Memory Usage</div>
                          <div className="font-medium text-slate-700 dark:text-slate-300">
                            {sampleTestResults[0]?.memoryUsed || 'N/A'}
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : examples.length > 0 ? (
                    <div className="space-y-4">
                      {/* Summary badge */}
                      <div className="flex items-center justify-between mb-2">
                        <div className="text-sm text-slate-700 dark:text-slate-300">
                          <span className="font-medium">{examples.length}</span> sample test cases available
                        </div>
                        <div className="inline-flex items-center px-3 py-1 rounded-full text-xs bg-indigo-50 dark:bg-indigo-900/30 border border-indigo-200 dark:border-indigo-800/50 text-indigo-700 dark:text-indigo-300 font-medium">
                          <Eye className="h-3 w-3 mr-1.5 opacity-70" />
                          Run to evaluate
                      </div>
                    </div>
                    
                      {/* Nested tabs for multiple test cases */}
                      <Tabs defaultValue={`testcase-0`} className="w-full">
                        <TabsList className="bg-gradient-to-r from-slate-100/90 to-indigo-50/80 dark:from-slate-800/70 dark:to-indigo-900/30 p-1 rounded-lg overflow-hidden backdrop-blur-sm border border-slate-200/80 dark:border-slate-700/30 shadow-sm mb-3 w-full flex">
                          {examples.map((tc: {id: string, input: string, output: string}, idx: number) => (
                            <TabsTrigger
                              key={`trigger-${tc.id}`}
                              value={`testcase-${idx}`}
                              className="flex-1 rounded-md py-2 data-[state=active]:bg-white data-[state=active]:dark:bg-black/95 data-[state=active]:text-indigo-700 data-[state=active]:dark:text-indigo-300 data-[state=active]:shadow-sm relative overflow-hidden group transition-all duration-150"
                            >
                              <div className="absolute inset-0 opacity-0 group-data-[state=active]:opacity-100 transition-opacity duration-300">
                                <div className="absolute inset-x-0 -bottom-1 h-0.5 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500"></div>
                                <div className="absolute inset-0 bg-gradient-to-br from-indigo-50/50 to-purple-50/30 dark:from-indigo-900/30 dark:to-purple-900/20 opacity-0 group-data-[state=active]:opacity-100 transition-opacity"></div>
                  </div>
                              <div className="flex items-center justify-center gap-1.5">
                                <div className="w-5 h-5 rounded-full flex items-center justify-center bg-gradient-to-br from-indigo-500 to-purple-600 text-white text-xs font-medium">
                                  {idx + 1}
                                </div>
                                <span className="hidden sm:inline font-medium text-sm group-data-[state=active]:text-indigo-600 dark:group-data-[state=active]:text-indigo-400">Test Case {idx + 1}</span>
                              </div>
                              <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-transparent via-indigo-500/30 to-transparent opacity-0 group-hover:opacity-100 group-data-[state=active]:opacity-0 transition-opacity"></div>
                            </TabsTrigger>
                          ))}
                        </TabsList>
                        
                        {examples.map((tc: {id: string, input: string, output: string}, idx: number) => (
                          <TabsContent key={`content-${tc.id}`} value={`testcase-${idx}`} className="focus-visible:outline-none focus-visible:ring-0">
                  <div className="bg-white dark:bg-black rounded-lg shadow-sm overflow-hidden border border-slate-200 dark:border-slate-700/50">
                              <div className="bg-gradient-to-r from-indigo-50 to-indigo-100/50 dark:from-indigo-900/20 dark:to-indigo-900/10 px-4 py-2 border-b border-slate-200 dark:border-slate-700/50 flex items-center justify-between">
                                <div className="flex items-center gap-2">
                                  <div className="w-5 h-5 rounded-full flex items-center justify-center bg-indigo-500 text-white text-xs font-medium">
                                    {idx + 1}
                                  </div>
                                  <span className="font-medium text-slate-700 dark:text-slate-300">Sample Test Case {idx + 1}</span>
                    </div>
                    
                                <div className="flex items-center">
                                  <span className="inline-flex items-center px-2.5 py-1 rounded-full text-xs bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-400 font-medium">
                                    <Info className="h-3 w-3 mr-1" />
                                    Not evaluated
                                  </span>
                          </div>
                        </div>
                              
                              <div className="p-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="rounded-lg overflow-hidden border border-slate-200 dark:border-slate-700/50">
                                  <div className="bg-slate-50 dark:bg-slate-800/60 px-3 py-1.5 border-b border-slate-200 dark:border-slate-700/50 text-xs font-medium text-slate-700 dark:text-slate-300">
                                    Input
                                  </div>
                                  <div className="p-3 font-mono text-sm bg-white dark:bg-slate-800/30 text-slate-700 dark:text-slate-300">
                                    {formatTestCase(tc.input)}
                                  </div>
                      </div>
                      
                                <div className="rounded-lg overflow-hidden border border-slate-200 dark:border-slate-700/50">
                                  <div className="bg-slate-50 dark:bg-slate-800/60 px-3 py-1.5 border-b border-slate-200 dark:border-slate-700/50 text-xs font-medium text-slate-700 dark:text-slate-300">
                                    Expected Output
                                  </div>
                                  <div className="p-3 font-mono text-sm bg-white dark:bg-slate-800/30 text-slate-700 dark:text-slate-300">
                                    {formatTestCase(tc.output)}
                                  </div>
                                </div>
                      </div>
                      
                              {/* Remove the Run This Test button by eliminating this whole div */}
                              {/* <div className="flex justify-center p-4 border-t border-slate-200 dark:border-slate-700/50">
                                <Button 
                                  size="sm"
                                  className="bg-gradient-to-r from-indigo-600 to-indigo-700 hover:from-indigo-700 hover:to-indigo-800 text-white shadow-sm gap-1 relative overflow-hidden min-w-32"
                                  onClick={runCode}
                                  disabled={isRunning}
                                >
                                  {isRunning ? (
                                    <>
                                      <div className="absolute inset-0 bg-gradient-to-r from-indigo-600 via-purple-500 to-indigo-600 animate-gradient-x"></div>
                                      <div className="relative z-10 flex items-center space-x-1">
                                        <span className="flex h-2 w-2 relative">
                                          <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-pink-400 opacity-75"></span>
                                          <span className="relative inline-flex rounded-full h-2 w-2 bg-pink-500"></span>
                                        </span>
                                        <span className="text-xs font-medium text-white animate-pulse">
                                          {loadingPhrase || "Processing..."}
                                        </span>
                          </div>
                                    </>
                                  ) : (
                                    <>
                                      <Play className="h-3.5 w-3.5 mr-1" />
                                      Run This Test
                                    </>
                                  )}
                                </Button>
                              </div> */}
                        </div>
                          </TabsContent>
                        ))}
                      </Tabs>
                          </div>
                  ) : (
                    <div className="flex items-center justify-center py-16">
                      <div className="text-center">
                        <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-indigo-50 dark:bg-indigo-900/30 flex items-center justify-center">
                          <Play className="h-8 w-8 text-indigo-500 dark:text-indigo-400" />
                        </div>
                        <h3 className="text-lg font-medium text-slate-700 dark:text-slate-300 mb-2">No Results Yet</h3>
                        <p className="text-slate-500 dark:text-slate-400 max-w-sm mb-4">
                          Run your code to see results for sample test cases
                        </p>
                        <Button 
                          className="bg-gradient-to-r from-indigo-600 to-indigo-700 hover:from-indigo-700 hover:to-indigo-800 text-white relative overflow-hidden min-w-40"
                          onClick={handleRunCode}
                          disabled={isRunning}
                        >
                          {isRunning ? (
                            <>
                              <div className="absolute inset-0 bg-gradient-to-r from-indigo-600 via-purple-500 to-indigo-600 animate-gradient-x"></div>
                              <div className="relative z-10 flex items-center space-x-1">
                                <span className="flex h-2 w-2 relative">
                                  <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-pink-400 opacity-75"></span>
                                  <span className="relative inline-flex rounded-full h-2 w-2 bg-pink-500"></span>
                                </span>
                                <span className="text-sm font-medium text-white animate-pulse">
                                  {loadingPhrase || "Processing..."}
                                </span>
                      </div>
                            </>
                          ) : (
                            <>
                          <Play className="h-4 w-4 mr-2" />
                          Run Sample Tests
                            </>
                          )}
                    </Button>
                    </div>
                  </div>
                  )}
                </TabsContent>
                
                {/* Hidden Testcases Tab */}
                <TabsContent value="hidden" className="focus-visible:outline-none focus-visible:ring-0">
                  <HiddenTestcasesTab
                    executingHiddenTestcases={executingHiddenTestcases}
                    hiddenTestResults={hiddenTestResults}
                    totalHiddenTestcases={totalHiddenTestcases}
                    completedHiddenTestcases={completedHiddenTestcases}
                    passedHiddenTestcases={passedHiddenTestcases}
                    skippedHiddenTestcases={skippedHiddenTestcases}
                    hiddenExecutionStatus={hiddenExecutionStatus}
                    isRunning={isRunning}
                    isSubmitting={isSubmitting}
                    submitCode={handleSubmitCode}
                  />
                </TabsContent>

                {/* Confetti celebration overlay */}
                {showCelebration && (
                  <div className="fixed inset-0 pointer-events-none z-50">
                    {/* This div is just a container for the confetti effect */}
                  </div>
                )}
              </Tabs>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 